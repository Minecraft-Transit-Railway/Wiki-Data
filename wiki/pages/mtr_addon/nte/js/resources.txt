====== Resource Loading ======

NTE provides several methods for controlling the loading and retrieval of resources within resource packs in JavaScript scripts.

Code written in the top-level space outside of functions will be executed when a resource pack is loaded and can be used to load resources such as models, textures, etc. Resources that should not be different for each train (such as models and such) are recommended to be stored in global variables to avoid excessive memory usage when loading a copy of the same content for each train.

===== ResourceLocation =====

Minecraft uses a ''ResourceLocation'' to identify files in a resource package. Many functions only accept ResourceLocation paths, not strings.

  * <code javascript>
static Resources.id(idStr: String): ResourceLocation
</code>
    * Converts the string to the appropriate ''ResourceLocation'', e.g. ''Resources.id("mtr:path/absolute.js")''.
  * <code javascript>
static Resources.idr(relPath: String): ResourceLocation
</code>
    * Loads and runs the JS file by location in the resource pack. For example, ''include(Resources.id("mtr:path/absolute.js"))''.

===== Model Loading =====

The way to handle the model in NTE is that the model file should first be loaded as ''RawModel'', then you may do some processing with it, then you have to upload it to get the ''ModelCluster'', and finally you have to hand the ''ModelCluster'' to NTE to display when rendering.

  * <code javascript>
static ModelManager.loadRawModel(Resources.manager(), path: ResourceLocation, null): RawModel
</code>
    * Loads a model as a whole as a ''RawModel''.
  * <code javascript>
static ModelManager.loadPartedRawModel(Resources.manager(), path: ResourceLocation, null): Map<String, RawModel>
</code>
    * Loads each group of a model into individual RawModels, returning a Java Map.
  * <code javascript>
static ModelManager.uploadVertArrays(rawModel: RawModel): ModelCluster
</code>
    * Uploads a RawModel to memory, returning the uploaded ModelCluster.

===== Loading AWT Resources =====

These functions load the resources used to draw dynamic textures via the Java AWT.

  * <code javascript>
static Resources.getSystemFont(name: String): Font
</code>
    * Get a system or MTR built-in font.

^ Font Name ^ Description ^
| Noto Serif | MTR's built-in serif font (similar to Song). Identical on all systems. |
| Noto Sans | NTE Built-in sans serif font (similar to Helvetica). Identical on all systems. |
| Serif | A serif font selected by AWT that is installed on this computer. May be different on different devices. |
| SansSerif | A sans serif font selected by AWT that is installed on this computer. May be different on different devices. |
| Monospaced | A monospaced font selected by AWT that is installed on this computer. May be different on different devices. |


  * <code javascript>
static Resources.readBufferedImage(path: ResourceLocation): BufferedImage
</code>
    * Loads an image as a BufferedImage.
  * <code javascript>
static Resources.readFont(path: ResourceLocation): Font
</code>
    * Load a TTF or OTF font as Font.
  * <code javascript>
static Resources.getFontRenderContext(): FontRenderContext
</code>
    * Get an AWT FontRenderContext.

===== Reading resource files =====
  * <code javascript>
static Resources.readString(location: ResourceLocation): String
</code>
    * Reads the contents of a resource file as a string. Returns null if reading fails.

===== Misc =====
  * <code javascript>
static Resources.parseNbtString(nbtStr: String): CompoundTag
</code>
    * Returns Minecraft's CompoundTag (type for NBT), syntax is similar to the one used in Command Blocks.

===== RawModel =====
^ Functions ^ Description ^
| ''RawModel.append(other: RawModel): void'' | Merges other RawModel into this RawModel. |
| ''RawModel.append(other: RawMesh): void'' | Merges other RawMesh into this RawModel. |
| ''RawModel.applyMatrix(transform: atrix4f): void'' | Applies the transformation matrix on the vertices of the model. |
| ''RawModel.applyTranslation(x: float, y: float, z: float): void'' | Moves the vertices of the model according to the specified parameters. |
| ''RawModel.applyRotation(direction: Vector3f, angle: float): void'' | Rotates the model vertices around the specified axis centered at the coordinate origin. The angles are specified in degrees. |
| ''RawModel.applyScale(x: float, y: float, z: float): void'' | Changes the size of the model. |
| ''RawModel.applyMirror(vx: boolean, vy: boolean, vz: boolean, nx: boolean, ny: boolean, nz: boolean): void'' | Mirrors the model. Six boolean values, the first three whether to mirror vertices or not, the last three whether to mirror normals or not. |
| ''RawModel.applyUVMirror(u: boolean, v: boolean): void'' | Mirrors the UV directions. As a result, it is necessary that the positive direction of V is directed downwards, so when importing models from Blockbench or Blender you should use ''rawModel.applyUVMirror(false, true)''. |
| ''RawModel.replaceTexture(oldFileName: String, path: ResourceLocation): void'' | Replaces all textures referencing ''oldFileName'' with the texture specified by ''path'' ResourceLocation. |
| ''RawModel.replaceAllTexture(path: ResourceLocation): void'' | Replaces all textures with the texture specified by ''path'' ResourceLocation. |
| ''RawModel.copy(): RawModel'' | Copies the textures and vertices of this model into a new model. |
| ''RawModel.copyForMaterialChanges(): RawModel'' | Copies the textures of this model into the new model, while keeping the vertices shared. |

If the same model needs to be modified in different ways, it may be necessary to copy the model. For example, ''a'' is a RawModel, and when ''b = a'', both variables will point to the same RawModel: modifying b will affect a, in which case the previous state will be lost. To prevent this, you should use ''b = a.copy()'' to create a copy so that the two variables do not affect each other.

If you don't need to change the geometry, but only need to change the material or replace the texture, you can use ''b = a.copyForMaterialChanges()'', which copies only the information associated with the material, obviating the need to copy vertices in this case.

===== ModelCluster =====
Once the model is loaded, the vertices can no longer be changed, but the textures can still be replaced. Therefore, if you need to replace textures several times, you can load the model first and then replace the textures, thus avoiding the unnecessary loading of the model, which is associated with replacing the textures each time and then loading them.

^ Functions ^ Description ^
| ''ModelCluster.replaceTexture(oldFileName: String, path: ResourceLocation): void'' | Replaces all textures referencing ''oldFileName'' with the texture specified by ''path'' ResourceLocation. |
| ''ModelCluster.replaceAllTexture(path: ResourceLocation): void'' | Replaces all textures with the texture specified by ''path'' ResourceLocation. |
| ''ModelCluster.copyForMaterialChanges(): ModelCluster'' | Copies the textures of this model into the new model, while keeping the vertices shared. |

===== Source =====
* https://www.zbx1425.cn/nautilus/mtr-nte/#/js-resources